{"version":3,"sources":["components/Image.tsx","components/ImageList.tsx","components/ModalOverlay.tsx","components/Nav.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Image","image","useState","isCopied","setIsCopied","arrayBuffer","Buffer","from","imgData","blob","Blob","type","imgType","imageUrl","URL","createObjectURL","console","log","copyTextToClipboard","text","a","navigator","clipboard","writeText","document","execCommand","className","src","alt","fileName","fileSize","toFixed","imgSource","Date","uploadedAt","toDateString","imgWidth","imgHeight","imgDesc","onClick","then","setTimeout","catch","err","ImageList","isOpen","setIsOpen","images","length","map","index","ModalOverlay","setImages","file","setFile","setImgType","imgPreview","setImgPreview","setImgDesc","error","setError","inputRef","useRef","getImgDimension","Promise","resolve","reject","reader","FileReader","readAsDataURL","onloadend","result","onload","String","naturalWidth","naturalHeight","onerror","Error","reset","handleSave","e","preventDefault","imgDim","formData","FormData","append","axios","post","headers","window","location","reload","style","display","ref","name","onChange","selectedFile","currentTarget","files","includes","current","click","width","color","target","value","cols","rows","disabled","Nav","App","useEffect","getImages","get","res","data","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"8JAwEeA,IAjEU,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAC1B,EAAgCC,oBAAS,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KAEIC,EAAcC,EAAOC,KAAMN,EAAMO,SACjCC,EAAO,IAAIC,KAAM,CAAEL,GAAe,CAAEM,KAAMV,EAAMW,UAChDC,EAAWC,IAAIC,gBAAgBN,GACnCO,QAAQC,IAAI,YAAaJ,GAEzB,IAaMK,EAAmB,uCAAG,WAAOC,GAAP,SAAAC,EAAA,2DACtB,cAAeC,WADO,gCAEXA,UAAUC,UAAUC,UAAUJ,GAFnB,wEAIjBK,SAASC,YAAY,QAAQ,EAAMN,IAJlB,2CAAH,sDAQzB,OACE,sBAAKO,UAAU,aAAf,UACE,qBAAKC,IAAMd,EAAWe,IAAI,KAC1B,sBAAKF,UAAU,eAAf,UACE,oBAAIA,UAAU,aAAd,SAA4BzB,EAAM4B,WAClC,qBAAIH,UAAU,YAAd,UACE,+BACE,sBAAMA,UAAU,WAAhB,mBACA,kCAAQzB,EAAM6B,SAAN,SAA4BC,QAAQ,GAA5C,YAEF,+BACE,sBAAML,UAAU,WAAhB,qBACA,+BAAOzB,EAAM+B,eAEf,+BACE,sBAAMN,UAAU,WAAhB,0BACA,+BAAO,IAAIO,KAAKhC,EAAMiC,YAAYC,oBAEpC,+BACE,sBAAMT,UAAU,WAAhB,yBACA,iCAAOzB,EAAMmC,SAAb,MAA0BnC,EAAMoC,mBAGpC,sBAAKX,UAAU,YAAf,UACE,6CACA,4BAAIzB,EAAMqC,aAEXnC,EACC,sBAAMuB,UAAU,YAAhB,oBACA,qBAAKC,IAAI,oBAAoBD,UAAU,YAAYE,IAAI,GAAGW,QAlDhD,WAChBrB,EAAoBL,GACjB2B,MAAK,WACJpC,GAAY,GACZqC,YAAW,WACTrC,GAAY,KACX,SAEJsC,OAAM,SAACC,GACN3B,QAAQC,IAAI0B,kB,mOCSLC,EAtBc,SAAC,GAAkC,EAAhCC,OAAiC,IAAzBC,EAAwB,EAAxBA,UAAWC,EAAa,EAAbA,OAMjD,OACE,mCACE,sBAAKrB,UAAU,UAAf,UACE,qBAAKA,UAAU,kBAAkBa,QAPrB,WAChBO,GAAU,IAMN,SACE,cAAC,IAAD,MAGDC,EAAOC,OAAS,EACfD,EAAOE,KAAI,SAAChD,EAAOiD,GAAR,OAAmB,cAAC,IAAD,CAAmBjD,MAAOA,GAAdiD,MAC1C,4DCuGKC,EAtHiB,SAAC,GAAsC,IAApCN,EAAmC,EAAnCA,OAAQC,EAA2B,EAA3BA,UACzC,GADoE,EAAhBM,UAC5BlD,mBAAsB,OAA9C,mBAAOmD,EAAP,KAAaC,EAAb,KACA,EAA8BpD,mBAAiB,IAA/C,mBAAOU,EAAP,KAAgB2C,EAAhB,KACA,EAAoCrD,mBAAiB,IAArD,mBAAOsD,EAAP,KAAmBC,EAAnB,KACA,EAA8BvD,mBAAS,IAAvC,mBAAOoC,EAAP,KAAgBoB,EAAhB,KACA,EAA0BxD,oBAAS,GAAnC,mBAAOyD,EAAP,KAAcC,EAAd,KACMC,EAAWC,iBAAyB,MAwBpCC,EAAkB,SAACV,GACvB,OAAO,IAAIW,SAAa,SAACC,EAASC,GAChC,IAAIC,EAAS,IAAIC,WACjBD,EAAOE,cAAchB,GACrBc,EAAOG,UAAY,WACjB,IAAIrE,EAAQ,IAAID,MAChBC,EAAM0B,IAAMwC,EAAOI,OACnBtE,EAAMuE,OAAS,WACb,IAAMpC,EAAYqC,OAAOxE,EAAMyE,cACzBrC,EAAYoC,OAAOxE,EAAM0E,eAC/BV,EAAQ,CAAC7B,WAAUC,gBAGvB8B,EAAOS,QAAU,WACfV,EAAOW,MAAM,kCAKbC,EAAQ,WACZxB,EAAQ,MACRR,GAAU,GACVY,EAAW,IACXD,EAAc,IACdG,GAAS,IAWLmB,EAAU,uCAAG,WAAOC,GAAP,iBAAA5D,EAAA,6DACjB4D,EAAEC,iBADe,SAEIlB,EAAgBV,GAFpB,cAEX6B,EAFW,QAGXC,EAAW,IAAIC,UACZC,OAAO,OAAQhC,GACxB8B,EAASE,OAAO,UAAWzE,GAC3BuE,EAASE,OAAO,YAAhB,OAA6BH,QAA7B,IAA6BA,OAA7B,EAA6BA,EAAQ7C,WACrC8C,EAASE,OAAO,WAAhB,OAA4BH,QAA5B,IAA4BA,OAA5B,EAA4BA,EAAQ9C,UACpC+C,EAASE,OAAO,UAAW/C,GARV,oBAUGgD,IAAMC,KAAK,sCAAuCJ,EAAU,CAC5EK,QAAS,CACP,eAAgB,yBAZL,eAefC,OAAOC,SAASC,SAfD,mDAkBf3E,QAAQC,IAAR,MAlBe,QAoBjB6D,IApBiB,2DAAH,sDAwBhB,OACE,qBAAKpD,UAAU,gBAAgBkE,MAAO,CAAEC,QAAShD,EAAS,QAAU,QAApE,SACE,sBAAKnB,UAAU,gBAAf,UACE,2CACA,uBAAOoE,IAAKjC,EAAUlD,KAAK,OAAOoF,KAAK,OAAQH,MAAO,CAAEC,QAAS,QAAUG,SArFhE,SAAChB,GAChBhE,QAAQC,IAAI,mBACZ,IACMgF,EADSjB,EAAEkB,cACkBC,MAAmB,GAGtD,GAAIF,GAFkB,CAAC,YAAa,aAAc,aAEhBG,SAASH,EAAatF,MAAO,CAC7D2C,EAAQ2C,GACR1C,EAAW0C,EAAatF,MACxBK,QAAQC,IAAIgF,GAEZ,IAAI9B,EAAS,IAAIC,WACjBD,EAAOE,cAAc4B,GACrB9B,EAAOG,UAAY,WACnBb,EAAcU,EAAOI,cAGrBX,GAAS,GACT5C,QAAQC,IAAI,mCAqEV,sBAAKS,UAAU,gBAAf,UACE,qBAAKA,UAAU,iBAAiBa,QAvCjB,WAAO,IAAD,EAC3B,UAAAsB,EAASwC,eAAT,SAAkBC,SAsCZ,SACG9C,EAAa,qBAAK7B,IAAK6B,EAAY+C,MAAM,UAAa,cAAC,IAAD,MAEzD,4BACA,uBAAOX,MAAO,CAAEY,MAAO7C,EAAQ,MAAQ,WAAvC,kCAIF,sBAAKjC,UAAU,OAAf,UACE,4CACA,0BAAUsE,SAAU,SAAAhB,GAAC,OAAEtB,EAAWsB,EAAEyB,OAAOC,QAAQA,MAAOpE,EAASyD,KAAK,OAAOY,KAAM,GAAIC,KAAM,OAEjG,sBAAKlF,UAAU,eAAf,UACE,2EAA6C,4CAC7C,wBAAQA,UAAU,YAAYa,QAASwC,EAAY8B,SAAoB,OAATxD,EAA9D,qBAEF,qBAAK3B,UAAU,cAAca,QAnDf,WAClBuC,KAkDI,qBChHOgC,EAXH,WACV,OACE,8BACE,sBAAKpF,UAAU,gBAAf,UACE,qBAAKC,IAAI,oBAAoBC,IAAI,YAAYF,UAAU,SACvD,oBAAIA,UAAU,QAAd,2BCiCOqF,EA9BH,WACV,MAA4B7G,oBAAS,GAArC,mBAAO2C,EAAP,KAAeC,EAAf,KACA,EAA4B5C,mBAAiB,IAA7C,mBAAO6C,EAAP,KAAeK,EAAf,KAEA4D,qBAAU,WACRC,MACC,IAEH,IAAMA,EAAS,uCAAG,4BAAA7F,EAAA,+EAEIkE,IAAM4B,IAAI,gCAFd,OAERC,EAFQ,OAGd/D,EAAU+D,EAAIC,MACdpG,QAAQC,IAAI,WAAYkG,EAAIC,MAJd,gDAMdpG,QAAQC,IAAI,2BANE,yDAAH,qDAUf,OACE,sBAAKS,UAAU,MAAf,UACE,cAAC,EAAD,IACA,sBAAKA,UAAU,YAAf,UACE,oBAAIA,UAAU,UAAd,6BACA,cAAC,EAAD,CAAWmB,OAAQA,EAAQC,UAAWA,EAAWC,OAAQA,OAE3D,cAAC,EAAD,CAAcF,OAAQA,EAAQC,UAAWA,EAAWM,UAAWA,QCnBtDiE,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqB/E,MAAK,YAAkD,IAA/CgF,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFvG,SAASwG,eAAe,SAM1BX,M","file":"static/js/main.f48dec71.chunk.js","sourcesContent":["import { FC, useState } from 'react'\r\nimport { Item } from '../Interfaces'\r\n\r\ninterface Props {\r\n  image: Item\r\n}\r\n\r\nconst Image: FC<Props> = ({ image }) => {\r\n  const [isCopied, setIsCopied] = useState(false)\r\n\r\n  let arrayBuffer = Buffer.from( image.imgData )\r\n  let blob = new Blob( [ arrayBuffer ], { type: image.imgType } )\r\n  let imageUrl = URL.createObjectURL(blob)\r\n  console.log('imageUrl:', imageUrl)\r\n\r\n  const handleCopy =() => {\r\n    copyTextToClipboard(imageUrl)\r\n      .then(() => {\r\n        setIsCopied(true);\r\n        setTimeout(() => {\r\n          setIsCopied(false);\r\n        }, 1500);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }\r\n\r\n  const copyTextToClipboard = async (text: string) => {\r\n    if ('clipboard' in navigator) {\r\n      return await navigator.clipboard.writeText(text);\r\n    } else {\r\n      return document.execCommand('copy', true, text);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"item image\">\r\n      <img src={ imageUrl } alt=\"\" />\r\n      <div className=\"item-overlay\">\r\n        <h3 className=\"item-title\">{image.fileName}</h3>\r\n        <ul className=\"item-list\">\r\n          <li>\r\n            <span className=\"item-key\">size:</span>\r\n            <span>{(image.fileSize/(1024*1024)).toFixed(2)} MB</span>\r\n          </li>\r\n          <li>\r\n            <span className=\"item-key\">source:</span>\r\n            <span>{image.imgSource}</span>\r\n          </li>\r\n          <li>\r\n            <span className=\"item-key\">uploaded at:</span>\r\n            <span>{new Date(image.uploadedAt).toDateString()}</span>\r\n          </li>\r\n          <li>\r\n            <span className=\"item-key\">dimensions:</span>\r\n            <span>{image.imgWidth} x {image.imgHeight}</span>\r\n          </li>\r\n        </ul>\r\n        <div className=\"item-desc\">\r\n          <h3>Description</h3>\r\n          <p>{image.imgDesc}</p>\r\n        </div>\r\n        {isCopied \r\n        ? <span className=\"item-link\">Copied</span> \r\n        : <img src=\"./images/link.svg\" className=\"item-link\" alt=\"\" onClick={handleCopy}/>\r\n        }\r\n      </div>      \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Image\r\n","import { FC, useState } from \"react\"\r\nimport { VscAdd } from \"react-icons/vsc\";\r\nimport { Item } from \"../Interfaces\";\r\nimport Image from \"./Image\"\r\n\r\ninterface Props {\r\n  isOpen: boolean\r\n  setIsOpen: React.Dispatch<React.SetStateAction<boolean>>\r\n  images: Item[]\r\n}\r\n\r\nconst ImageList: FC<Props> = ({ isOpen, setIsOpen, images }) => {\r\n\r\n  const openModal = () => {\r\n    setIsOpen(true)\r\n  }  \r\n\r\n  return (\r\n    <>\r\n      <div className=\"gallery\">\r\n        <div className=\"item open-modal\" onClick={openModal}>\r\n          <VscAdd />\r\n        </div>\r\n\r\n        {images.length > 0 \r\n        ? images.map((image, index) => (<Image key={index} image={image}/>)) \r\n        : <h3>No images to display</h3>\r\n        }             \r\n      </div>      \r\n    </>\r\n  )\r\n}\r\n\r\nexport default ImageList\r\n","import { VscAdd } from \"react-icons/vsc\";\r\nimport { FC, FormEvent, SyntheticEvent, useRef, useState } from 'react';\r\nimport axios from 'axios'\r\nimport { Dim, Item } from \"../Interfaces\";\r\n\r\ninterface Props {\r\n  isOpen: boolean\r\n  setIsOpen: React.Dispatch<React.SetStateAction<boolean>>\r\n  setImages: React.Dispatch<React.SetStateAction<Item[]>>\r\n}\r\n\r\nconst ModalOverlay: FC<Props> = ({ isOpen, setIsOpen, setImages }) => {\r\n  const [file, setFile] = useState<File | null>(null)\r\n  const [imgType, setImgType] = useState<string>('')\r\n  const [imgPreview, setImgPreview] = useState<string>('')\r\n  const [imgDesc, setImgDesc] = useState('')\r\n  const [error, setError] = useState(false)\r\n  const inputRef = useRef<HTMLInputElement>(null)  \r\n\r\n  const onChange = (e: SyntheticEvent) => {\r\n    console.log('onchange called')\r\n    const target = e.currentTarget as HTMLInputElement\r\n    const selectedFile: File = (target.files as FileList)[0]\r\n    const ALLOWED_TYPES = ['image/png', 'image/jpeg', 'image/jpg']    \r\n\r\n    if (selectedFile && ALLOWED_TYPES.includes(selectedFile.type)) {      \r\n      setFile(selectedFile)\r\n      setImgType(selectedFile.type)\r\n      console.log(selectedFile)\r\n\r\n      let reader = new FileReader()      \r\n      reader.readAsDataURL(selectedFile) \r\n      reader.onloadend = () => {\r\n      setImgPreview(reader.result as string)\r\n      }    \r\n    } else {\r\n      setError(true)\r\n      console.log('selected file is not allowed')\r\n    }\r\n  }  \r\n\r\n  const getImgDimension = (file: File) => {\r\n    return new Promise<Dim>((resolve, reject) => {\r\n      let reader = new FileReader()  \r\n      reader.readAsDataURL(file)    \r\n      reader.onloadend = () => {\r\n        let image = new Image()\r\n        image.src = reader.result as string\r\n        image.onload = () => {\r\n          const imgWidth  = String(image.naturalWidth)\r\n          const imgHeight = String(image.naturalHeight)                   \r\n          resolve({imgWidth, imgHeight})\r\n        }        \r\n      }\r\n      reader.onerror = () => {\r\n        reject(Error('getImageDimension failed'))\r\n      }\r\n    })\r\n  }\r\n\r\n  const reset = () => {\r\n    setFile(null)\r\n    setIsOpen(false)\r\n    setImgDesc('')\r\n    setImgPreview('')\r\n    setError(false)\r\n  }\r\n\r\n  const handleAddImage = () => {    \r\n    inputRef.current?.click()\r\n  }\r\n\r\n  const handleClose = () => {\r\n    reset()\r\n  }\r\n\r\n  const handleSave = async (e: FormEvent) => {\r\n    e.preventDefault();\r\n    const imgDim = await getImgDimension(file as File)\r\n    const formData = new FormData()\r\n    formData.append('file', file as File)\r\n    formData.append('imgType', imgType)\r\n    formData.append('imgHeight', imgDim?.imgHeight as string)\r\n    formData.append('imgWidth', imgDim?.imgWidth as string)\r\n    formData.append('imgDesc', imgDesc)\r\n    try {\r\n      const res = await axios.post('http://localhost:5000/images/upload', formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data'\r\n        }\r\n      })\r\n      window.location.reload()\r\n    } \r\n    catch (error) {\r\n      console.log(error)\r\n    }\r\n    reset()\r\n  }\r\n\r\n  \r\n  return (\r\n    <div className=\"modal-overlay\" style={{ display: isOpen ? 'block' : 'none' }}>\r\n      <div className=\"modal-content\">\r\n        <h3>New Image</h3>\r\n        <input ref={inputRef} type=\"file\" name=\"file\"  style={{ display: 'none' }} onChange={onChange}/>                  \r\n        \r\n        <div className=\"add-image-box\">\r\n          <div className=\"add-image-icon\" onClick={handleAddImage}>\r\n            {imgPreview ? <img src={imgPreview} width=\"100px\" /> : <VscAdd  />}\r\n          </div>            \r\n          <p>\r\n          <small style={{ color: error ? 'red' : 'inherit'}}>Only jpg or png</small>\r\n          </p>\r\n        </div>\r\n\r\n        <div className=\"desc\">\r\n          <p>Description</p>\r\n          <textarea onChange={e=>setImgDesc(e.target.value)} value={imgDesc} name=\"desc\" cols={40} rows={8}></textarea>\r\n        </div>\r\n        <div className=\"modal-footer\">\r\n          <small>By uploading an image, you accept our <span>Terms</span></small>\r\n          <button className=\"modal-btn\" onClick={handleSave} disabled={ file === null ? true : false }>Save</button>\r\n        </div>\r\n        <div className=\"modal-close\" onClick={handleClose}>X</div>\r\n      </div> \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ModalOverlay\r\n","const Nav = () => {\r\n  return (\r\n    <nav>\r\n      <div className=\"container nav\">\r\n        <img src=\"./images/lime.svg\" alt=\"Lime logo\" className=\"logo\" />\r\n        <h1 className=\"brand\">LimeCRM</h1>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default Nav\r\n","import axios from 'axios';\r\nimport { useEffect, useState } from 'react';\r\nimport './App.css';\r\nimport ImageList from './components/ImageList';\r\nimport ModalOverlay from './components/ModalOverlay';\r\nimport Nav from './components/Nav';\r\nimport { Item } from './Interfaces';\r\n\r\nconst App = () => {\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const [images, setImages] = useState<Item[]>([])\r\n\r\n  useEffect(() => {\r\n    getImages()\r\n  }, [])\r\n\r\n  const getImages = async () => {\r\n    try {\r\n      const res = await axios.get('http://localhost:5000/images')\r\n      setImages(res.data)\r\n      console.log('results:', res.data)      \r\n    } catch (error) {\r\n      console.log('Something totally broke')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <Nav />\r\n      <div className=\"container\">        \r\n        <h1 className=\"heading\">Uploaded Images</h1>\r\n        <ImageList isOpen={isOpen} setIsOpen={setIsOpen} images={images} />\r\n      </div>\r\n      <ModalOverlay isOpen={isOpen} setIsOpen={setIsOpen} setImages={setImages} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}